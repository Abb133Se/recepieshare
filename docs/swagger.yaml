definitions:
  controller.AverageRatingResponse:
    properties:
      average:
        type: number
      count:
        type: integer
      recipe_id:
        type: integer
    type: object
  controller.CategoriesResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      message:
        type: string
    type: object
  controller.CategoryResponse:
    properties:
      data:
        $ref: '#/definitions/model.Category'
      message:
        type: string
    type: object
  controller.CommentResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.CommentsResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      message:
        type: string
    type: object
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.FavoriteResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controller.ForgotPasswordResponse:
    properties:
      message:
        type: string
      reset_token:
        type: string
    type: object
  controller.IngredientCreateResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.IngredientResponse:
    properties:
      data:
        $ref: '#/definitions/model.Ingredient'
      message:
        type: string
    type: object
  controller.IngredientsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      message:
        type: string
    type: object
  controller.MostPopularRecipe:
    properties:
      favorite_count:
        type: integer
      recipe_id:
        type: integer
      title:
        type: string
    type: object
  controller.MostPopularRecipesResponse:
    properties:
      recipes:
        items:
          $ref: '#/definitions/controller.MostPopularRecipe'
        type: array
    type: object
  controller.NutritionResponse:
    properties:
      nutritional_values: {}
    type: object
  controller.RatingResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.RecipeListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      message:
        type: string
    type: object
  controller.RecipeResponse:
    properties:
      data:
        $ref: '#/definitions/model.Recipe'
      message:
        type: string
    type: object
  controller.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  controller.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  controller.SimpleMessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.SuccessMessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.TagNamesInput:
    properties:
      tags:
        items:
          type: string
        type: array
    required:
    - tags
    type: object
  controller.TagResponse:
    properties:
      data:
        $ref: '#/definitions/model.Tag'
      message:
        type: string
    type: object
  controller.TagsResponse:
    properties:
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
    type: object
  controller.TopRatedRecipe:
    properties:
      average:
        type: number
      recipe_id:
        type: integer
      title:
        type: string
      total_votes:
        type: integer
    type: object
  controller.UserFavoritesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Favorite'
        type: array
      message:
        type: string
    type: object
  controller.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controller.UserLoginResponse:
    properties:
      token:
        type: string
    type: object
  controller.UserRatingsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Rating'
        type: array
      message:
        type: string
    type: object
  controller.UserRecipesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      message:
        type: string
    type: object
  controller.UserSignupRequest:
    properties:
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - last_name
    - name
    - password
    type: object
  model.Category:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.Comment:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      likes:
        type: integer
      recipe_id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - description
    - title
    type: object
  model.Favorite:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      recipe_id:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - recipe_id
    - user_id
    type: object
  model.Ingredient:
    properties:
      amount:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      recipe_id:
        type: integer
      updatedAt:
        type: string
    required:
    - amount
    - name
    type: object
  model.Rating:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      recipe_id:
        type: integer
      score:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - score
    type: object
  model.Recipe:
    properties:
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      createdAt:
        type: string
      favorites:
        items:
          $ref: '#/definitions/model.Favorite'
        type: array
      id:
        type: integer
      ingredients:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      ratings:
        items:
          $ref: '#/definitions/model.Rating'
        type: array
      steps:
        items:
          $ref: '#/definitions/model.Step'
        type: array
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      text:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - text
    - title
    - user_id
    type: object
  model.Step:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      order:
        type: integer
      recipe_id:
        type: integer
      text:
        type: string
      updatedAt:
        type: string
    required:
    - order
    - text
    type: object
  model.Tag:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      description: Retrieve paginated list of categories optionally sorted by name
        or creation date
      parameters:
      - default: 10
        description: Limit number of categories returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of categories to skip
        in: query
        name: offset
        type: integer
      - description: 'Sort order: name_asc, name_desc, created_asc, created_desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all categories with pagination and sorting
      tags:
      - categories
  /category:
    post:
      consumes:
      - application/json
      description: Create a category with optional associated recipes by IDs
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /category/{id}:
    delete:
      description: Delete a category and clear its recipe associations
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a category by ID
      tags:
      - categories
    get:
      description: Retrieve a single category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category details by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a category by ID
      tags:
      - categories
  /comment:
    post:
      consumes:
      - application/json
      description: Create a new comment linked to a recipe and user
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Post a new comment
      tags:
      - comments
  /comment/{id}:
    delete:
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a comment by ID
      tags:
      - comments
  /comment/{id}/like/dec:
    post:
      description: Decrease likes for a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Decrement comment like count
      tags:
      - comments
  /comment/{id}/like/inc:
    post:
      description: Increase likes for a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Increment comment like count
      tags:
      - comments
  /favorite:
    post:
      consumes:
      - application/json
      description: Adds a favorite record linking a user and a recipe
      parameters:
      - description: Favorite data
        in: body
        name: favorite
        required: true
        schema:
          $ref: '#/definitions/model.Favorite'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.FavoriteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Add a favorite recipe for a user
      tags:
      - favorites
  /favorite/{id}:
    delete:
      description: Deletes a favorite record by its ID
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a favorite by ID
      tags:
      - favorites
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Sends password reset instructions if email exists
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/controller.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Initiate password reset
      tags:
      - auth
  /image/{entity}/{entityId}/{imageId}:
    get:
      description: Generic endpoint to serve images for any entity type
      parameters:
      - description: Entity type (e.g. user, recipe)
        in: path
        name: entity
        required: true
        type: string
      - description: Entity ID
        in: path
        name: entityId
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID or entity parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Serve image by entity type and ID
      tags:
      - images
  /ingredient:
    post:
      consumes:
      - application/json
      description: Create an ingredient linked to a recipe
      parameters:
      - description: Ingredient data
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/model.Ingredient'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.IngredientCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new ingredient
      tags:
      - ingredients
  /ingredient/{id}:
    delete:
      description: Delete an ingredient record by its ID
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete an ingredient by ID
      tags:
      - ingredients
    get:
      description: Retrieve an ingredient by its ID
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.IngredientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get an ingredient by ID
      tags:
      - ingredients
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controller.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: User login
      tags:
      - auth
  /rating:
    post:
      consumes:
      - application/json
      description: Add a new rating or update existing rating for a recipe by a user.
        Score must be between 1 and 5.
      parameters:
      - description: Rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/model.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Add or update a rating for a recipe by a user
      tags:
      - ratings
  /rating/{id}:
    delete:
      description: Delete a rating by its ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a rating by ID
      tags:
      - ratings
    put:
      consumes:
      - application/json
      description: Update the score of an existing rating by its ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/model.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a rating by ID
      tags:
      - ratings
  /recipe:
    post:
      consumes:
      - application/json
      description: Create a new recipe with ingredients, tags, categories, and steps
      parameters:
      - description: Recipe data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/model.Recipe'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.RecipeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new recipe
      tags:
      - recipes
  /recipe/{id}:
    delete:
      description: Delete a recipe given its ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a recipe by ID
      tags:
      - recipes
    get:
      description: Get detailed recipe info including ingredients, comments, tags,
        categories, and steps
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RecipeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get recipe by ID
      tags:
      - recipes
    put:
      consumes:
      - application/json
      description: Updates the title, text, ingredients, and steps of a specific recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated recipe data
        in: body
        name: recipe
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a recipe
      tags:
      - recipes
  /recipe/{id}/calories:
    get:
      description: Estimate nutrition info based on ingredients via AI model
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.NutritionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get nutritional values for a recipe
      tags:
      - recipes
  /recipe/{id}/categories:
    delete:
      description: Clears all categories associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove all categories from a recipe
      tags:
      - recipes
    get:
      description: Retrieves all categories associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get categories for a recipe
      tags:
      - recipes
  /recipe/{id}/comments:
    get:
      description: Retrieve comments with pagination and sorting for a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Limit number of comments
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Sort order (e.g., date_desc)
        in: query
        name: sort
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get paginated comments for a recipe
      tags:
      - recipes
  /recipe/{id}/image/{imageId}:
    delete:
      description: Deletes an image associated with a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      responses:
        "200":
          description: Image deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a recipe image by ID
      tags:
      - images
    get:
      description: Retrieves and serves an image associated with a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Serve recipe image by ID
      tags:
      - images
  /recipe/{id}/images:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file and associates it with a recipe by recipe
        ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file (jpeg, png, webp)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or file error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload image for a recipe
      tags:
      - images
  /recipe/{id}/ingredients:
    get:
      description: Retrieve all ingredients for a specific recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.IngredientsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all ingredients for a recipe
      tags:
      - recipes
  /recipe/{id}/rating:
    get:
      description: Retrieve the average rating and count of ratings for a given recipe
        ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AverageRatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get average rating for a recipe
      tags:
      - ratings
  /recipe/{id}/tags:
    delete:
      description: Clears all tags associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove all tags from a recipe
      tags:
      - recipes
    get:
      description: Retrieves all tags associated with the specified recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get tags for a recipe
      tags:
      - recipes
    put:
      consumes:
      - application/json
      description: Replaces the tags associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of tag names
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/controller.TagNamesInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update tags for a recipe
      tags:
      - recipes
  /recipe/list:
    get:
      description: Retrieve recipes with pagination, includes comments and ingredients
      parameters:
      - description: Limit number of recipes
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RecipeListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get paginated list of recipes
      tags:
      - recipes
  /recipes/most-popular:
    get:
      description: Get recipes sorted by number of favorites
      parameters:
      - description: Limit number of recipes
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MostPopularRecipesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get most popular recipes by favorites
      tags:
      - recipes
  /recipes/search:
    get:
      description: Retrieves a list of recipes matching the given filters.
      parameters:
      - description: Filter by recipe title (partial match)
        in: query
        name: title
        type: string
      - description: Filter by ingredient name
        in: query
        name: ingredient
        type: string
      - description: Comma-separated list of tag IDs
        in: query
        name: tag_ids
        type: string
      - description: Comma-separated list of category IDs
        in: query
        name: category_ids
        type: string
      - description: Filter by recipe author's user ID
        in: query
        name: user_id
        type: string
      - description: Sort field (e.g., 'title', 'created_at')
        in: query
        name: sort
        type: string
      - description: Max number of recipes to return
        in: query
        name: limit
        type: integer
      - description: Number of recipes to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.RecipeResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Search recipes
      tags:
      - recipes
  /recipes/top-rated:
    get:
      description: Get recipes sorted by average rating, with total votes count
      parameters:
      - description: Limit number of recipes
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.TopRatedRecipe'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get top rated recipes
      tags:
      - recipes
  /reset-password:
    post:
      consumes:
      - application/json
      description: Resets password using reset token
      parameters:
      - description: Reset password data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Reset user password
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User signup info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserSignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /tag:
    post:
      consumes:
      - application/json
      description: Creates a new tag. Optionally associates it with recipes by IDs.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/model.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new tag
      tags:
      - tags
  /tag/{id}:
    delete:
      description: Deletes a tag and removes all its associations with recipes
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a tag by ID
      tags:
      - tags
    get:
      description: Retrieves a tag by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get a tag by ID
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Updates the name of a tag specified by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/controller.TagsResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a tag by ID
      tags:
      - tags
  /tags:
    get:
      description: Retrieves all tags with their associated recipes
      parameters:
      - description: Limit number of recipes returned
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.TagResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all tags
      tags:
      - tags
  /user/{id}/favorites:
    get:
      description: Retrieves favorite recipes of the specified user, supports pagination
        via limit and offset
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Limit number of favorites returned
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserFavoritesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get favorite recipes of a user
      tags:
      - users
  /user/{id}/profile-image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a single profile image for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file (jpeg, png, webp)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or file error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Upload user profile image
      tags:
      - images
  /user/{id}/profile-image/{imageId}:
    delete:
      description: Deletes a user's profile image by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      responses:
        "200":
          description: Profile image deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user profile image
      tags:
      - images
    get:
      description: Retrieves and serves a user's profile image
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Serve user profile image by ID
      tags:
      - images
  /user/{id}/ratings:
    get:
      description: Retrieves ratings provided by the specified user, supports pagination
        via limit and offset
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Limit number of ratings returned
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserRatingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get ratings given by a user
      tags:
      - users
  /user/{id}/recipes:
    get:
      description: Retrieves recipes authored by the specified user, supports pagination
        via limit and offset query params
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Limit number of recipes returned
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserRecipesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get recipes created by a user
      tags:
      - users
swagger: "2.0"
