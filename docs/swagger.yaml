definitions:
  controller.AverageRatingResponse:
    properties:
      average:
        type: number
      count:
        type: integer
      recipe_id:
        type: integer
    type: object
  controller.CategoriesResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      message:
        type: string
    type: object
  controller.CategoryResponse:
    properties:
      data:
        $ref: '#/definitions/model.Category'
      message:
        type: string
    type: object
  controller.CommentResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.CommentWithUserName:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      likes:
        type: integer
      recipe_id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    required:
    - description
    - title
    type: object
  controller.CommentsResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/controller.CommentWithUserName'
        type: array
      message:
        type: string
    type: object
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.FavoriteResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.FavoriteWithTitle:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      recipe_id:
        type: integer
      recipe_title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - recipe_id
    - user_id
    type: object
  controller.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controller.ForgotPasswordResponse:
    properties:
      message:
        type: string
      reset_token:
        type: string
    type: object
  controller.IngredientCreateResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.IngredientResponse:
    properties:
      data:
        $ref: '#/definitions/model.Ingredient'
      message:
        type: string
    type: object
  controller.IngredientsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      message:
        type: string
    type: object
  controller.MostPopularRecipe:
    properties:
      favorite_count:
        type: integer
      recipe_id:
        type: integer
      title:
        type: string
    type: object
  controller.MostPopularRecipesResponse:
    properties:
      recipes:
        items:
          $ref: '#/definitions/controller.MostPopularRecipe'
        type: array
    type: object
  controller.NutritionResponse:
    properties:
      nutritional_values: {}
    type: object
  controller.PostCommentRequest:
    properties:
      description:
        type: string
      recipe_id:
        type: integer
      title:
        type: string
    required:
    - description
    - recipe_id
    - title
    type: object
  controller.PostFavoriteRequest:
    properties:
      recipe_id:
        type: integer
    required:
    - recipe_id
    type: object
  controller.PostRatingRequest:
    properties:
      recipe_id:
        type: integer
      score:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - recipe_id
    - score
    type: object
  controller.PostRecipeRequest:
    properties:
      category_ids:
        items:
          type: integer
        type: array
      ingredients:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      steps:
        items:
          $ref: '#/definitions/model.Step'
        type: array
      tag_ids:
        description: 'Optional: Use existing tag IDs'
        items:
          type: integer
        type: array
      tag_names:
        description: 'Optional: Create/find tags by name'
        items:
          type: string
        type: array
      text:
        type: string
      title:
        type: string
    required:
    - ingredients
    - text
    - title
    type: object
  controller.RatingResponse:
    properties:
      id:
        type: integer
      message:
        type: string
    type: object
  controller.RecipeListWithImagesResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/controller.RecipeWithImageIDs'
        type: array
      message:
        type: string
    type: object
  controller.RecipeSummary:
    description: Minimal recipe representation used to highlight "most popular" and
      "highest rated" recipes.
    properties:
      count:
        description: Favorite count for most-popular recipe; only present if relevant
        example: 120
        type: integer
      id:
        description: Unique identifier of the recipe
        example: 7
        type: integer
      score:
        description: Rating score for highest-rated recipe (scale 1â€“5); only present
          if relevant
        example: 4.8
        type: number
      title:
        description: Title of the recipe
        example: Classic Pancakes
        type: string
    type: object
  controller.RecipeWithImageIDs:
    properties:
      calories:
        type: number
      carbs:
        type: number
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      created_at:
        type: string
      fat:
        type: number
      favorite_count:
        type: integer
      fiber:
        type: number
      id:
        type: integer
      images:
        items:
          type: integer
        type: array
      ingredients:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      is_favorited:
        type: boolean
      protein:
        type: number
      steps:
        items:
          $ref: '#/definitions/model.Step'
        type: array
      sugar:
        type: number
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      text:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  controller.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  controller.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  controller.SimpleMessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.SuccessMessageResponse:
    properties:
      message:
        type: string
    type: object
  controller.TagNamesInput:
    properties:
      tags:
        items:
          type: string
        type: array
    required:
    - tags
    type: object
  controller.TagResponse:
    properties:
      data:
        $ref: '#/definitions/model.Tag'
      message:
        type: string
    type: object
  controller.TagsResponse:
    properties:
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
    type: object
  controller.TimeSeriesData:
    properties:
      count:
        type: integer
      label:
        type: string
    type: object
  controller.TopRatedRecipe:
    properties:
      average:
        type: number
      recipe_id:
        type: integer
      title:
        type: string
      total_votes:
        type: integer
    type: object
  controller.UserFavoritesResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/controller.FavoriteWithTitle'
        type: array
      message:
        type: string
    type: object
  controller.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controller.UserLoginResponse:
    properties:
      token:
        type: string
      user_id:
        type: integer
    type: object
  controller.UserProfileResponse:
    description: Full user profile including base user data, profile image, aggregated
      statistics, and highlighted recipes.
    properties:
      highest_rated_recipe:
        allOf:
        - $ref: '#/definitions/controller.RecipeSummary'
        description: The user's recipe with the highest average rating (if exists)
      most_popular_recipe:
        allOf:
        - $ref: '#/definitions/controller.RecipeSummary'
        description: The user's recipe with the highest number of favorites (if exists)
      profile_image:
        allOf:
        - $ref: '#/definitions/model.Image'
        description: Profile image associated with the user (if uploaded), including
          file path and metadata
      stats:
        allOf:
        - $ref: '#/definitions/controller.UserStats'
        description: Aggregated statistics about user's activity (recipes, comments,
          favorites, ratings)
      user:
        allOf:
        - $ref: '#/definitions/model.User'
        description: |-
          Base user information (name, email, etc.)
          Warning: password and sensitive fields are omitted from this response
    type: object
  controller.UserRatingsResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Rating'
        type: array
      message:
        type: string
    type: object
  controller.UserRecipesResponse:
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      message:
        type: string
    type: object
  controller.UserSignupRequest:
    properties:
      email:
        type: string
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - last_name
    - name
    - password
    type: object
  controller.UserStats:
    description: Aggregated statistics based on the user's activity in the system.
    properties:
      average_likes_per_comment:
        description: Average number of likes per comment posted by this user
        example: 2.3
        type: number
      average_rating:
        description: Average rating across all this user's recipes (scale 1â€“5)
        example: 4.5
        type: number
      average_rating_given:
        description: Average rating value this user gives when rating other recipes
          (scale 1â€“5)
        example: 3.8
        type: number
      total_comments:
        description: Total number of comments posted by this user
        example: 34
        type: integer
      total_favorites:
        description: Total number of times this user's recipes were favorited by others
        example: 87
        type: integer
      total_favorites_given:
        description: Total number of recipes this user has favorited
        example: 25
        type: integer
      total_likes_on_comments:
        description: Sum of likes across all comments posted by this user
        example: 56
        type: integer
      total_ratings_given:
        description: Total number of ratings this user has given to other recipes
        example: 19
        type: integer
      total_recipes:
        description: Total number of recipes created by this user
        example: 12
        type: integer
    type: object
  model.Category:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.Comment:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      likes:
        type: integer
      recipe_id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - description
    - title
    type: object
  model.Favorite:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      recipe_id:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - recipe_id
    - user_id
    type: object
  model.Image:
    properties:
      created_at:
        type: string
      entity_id:
        type: integer
      entity_type:
        type: string
      format:
        type: string
      id:
        type: integer
      path:
        type: string
      size:
        type: integer
    type: object
  model.Ingredient:
    properties:
      amount:
        type: string
      calories:
        type: number
      carbs:
        type: number
      createdAt:
        type: string
      fat:
        type: number
      fiber:
        type: number
      id:
        type: integer
      name:
        type: string
      protein:
        type: number
      recipe_id:
        type: integer
      sugar:
        type: number
      updatedAt:
        type: string
    required:
    - amount
    - name
    type: object
  model.Rating:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      recipe_id:
        type: integer
      score:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - score
    type: object
  model.Recipe:
    properties:
      calories:
        type: number
      carbs:
        type: number
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      createdAt:
        type: string
      fat:
        type: number
      favorites:
        items:
          $ref: '#/definitions/model.Favorite'
        type: array
      fiber:
        type: number
      id:
        type: integer
      ingredients:
        items:
          $ref: '#/definitions/model.Ingredient'
        type: array
      protein:
        type: number
      ratings:
        items:
          $ref: '#/definitions/model.Rating'
        type: array
      steps:
        items:
          $ref: '#/definitions/model.Step'
        type: array
      sugar:
        type: number
      tags:
        items:
          $ref: '#/definitions/model.Tag'
        type: array
      text:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    required:
    - text
    - title
    - user_id
    type: object
  model.Step:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      order:
        type: integer
      recipe_id:
        type: integer
      text:
        type: string
      updatedAt:
        type: string
    required:
    - order
    - text
    type: object
  model.Tag:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    required:
    - name
    type: object
  model.User:
    properties:
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      createdAt:
        type: string
      email:
        type: string
      favorites:
        items:
          $ref: '#/definitions/model.Favorite'
        type: array
      id:
        type: integer
      last_name:
        type: string
      name:
        type: string
      password:
        type: string
      ratings:
        items:
          $ref: '#/definitions/model.Rating'
        type: array
      recipes:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      role:
        type: string
      salt:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/analytics:
    get:
      description: Returns aggregated counts of metrics (views, favorites, ratings,
        site visits, recipes created) grouped by day or month depending on the requested
        period.
      parameters:
      - description: Metric to analyze
        enum:
        - views
        - favorites
        - ratings
        - site
        - recipes
        in: query
        name: metric
        required: true
        type: string
      - description: Time period
        enum:
        - week
        - month
        - year
        in: query
        name: period
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.TimeSeriesData'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get analytics time-series data
      tags:
      - analytics
  /admin/user/{userID}/comment/{id}:
    delete:
      description: Admin deletes a comment of any user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a comment (admin)
      tags:
      - comments
  /admin/user/{userID}/rating/{id}:
    delete:
      description: Admin deletes a rating of any user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a rating (admin)
      tags:
      - ratings
  /admin/user/{userID}/recipe/{id}:
    delete:
      description: Admin deletes a recipe of any user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a recipe (admin)
      tags:
      - recipes
  /admin/user/{userID}/unfavorite/{favoriteID}:
    delete:
      description: Admin removes a favorite of any user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Favorite ID
        in: path
        name: favoriteID
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a favorite (admin)
      tags:
      - favorites
  /categories:
    get:
      description: Retrieve a paginated list of categories with total count, optionally
        sorted by name or creation date
      parameters:
      - default: 10
        description: Limit number of categories returned
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of categories to skip
        in: query
        name: offset
        type: integer
      - description: 'Sort order: name_asc, name_desc, created_asc, created_desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all categories with pagination and sorting
      tags:
      - categories
  /category:
    post:
      consumes:
      - application/json
      description: Create a category with optional associated recipes by IDs
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new category
      tags:
      - categories
  /category/{id}:
    delete:
      description: Delete a category and clear its recipe associations
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a category by ID
      tags:
      - categories
    get:
      description: Retrieve a single category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category details by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a category by ID
      tags:
      - categories
  /comment:
    post:
      consumes:
      - application/json
      description: Creates a new comment linked to a recipe by the current user (from
        JWT). Each user can comment only once per recipe.
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/controller.PostCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommentResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Recipe not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: User has already commented on this recipe
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Post a new comment on a recipe
      tags:
      - comments
  /comment/{id}/like/dec:
    post:
      description: Decrease likes for a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Decrement comment like count
      tags:
      - comments
  /comment/{id}/like/inc:
    post:
      description: Increase likes for a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Increment comment like count
      tags:
      - comments
  /favorite:
    post:
      consumes:
      - application/json
      description: Adds a favorite linking the current user (from JWT) and the specified
        recipe. A user can only favorite a recipe once.
      parameters:
      - description: Favorite data
        in: body
        name: favorite
        required: true
        schema:
          $ref: '#/definitions/controller.PostFavoriteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.FavoriteResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Recipe not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Favorite already exists
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a favorite recipe for the authenticated user
      tags:
      - favorites
  /favorites:
    get:
      description: Retrieve a paginated list of all favorites with user and recipe
        details
      parameters:
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Pagination offset
        in: query
        name: offset
        type: integer
      - default: date_desc
        description: 'Sort order: date_asc, date_desc'
        in: query
        name: sortOrder
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all favorites
      tags:
      - favorites
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Sends password reset instructions if email exists
      parameters:
      - description: User email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/controller.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ForgotPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Initiate password reset
      tags:
      - auth
  /image/{entity}/{entityId}/{imageId}:
    get:
      description: Generic endpoint to serve images for any entity type
      parameters:
      - description: Entity type (e.g. user, recipe)
        in: path
        name: entity
        required: true
        type: string
      - description: Entity ID
        in: path
        name: entityId
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID or entity parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Serve image by entity type and ID
      tags:
      - images
  /ingredient:
    post:
      consumes:
      - application/json
      description: Create an ingredient linked to a recipe
      parameters:
      - description: Ingredient data
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/model.Ingredient'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.IngredientCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new ingredient
      tags:
      - ingredients
  /ingredient/{id}:
    delete:
      description: Delete an ingredient record by its ID
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete an ingredient by ID
      tags:
      - ingredients
    get:
      description: Retrieve an ingredient by its ID
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.IngredientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get an ingredient by ID
      tags:
      - ingredients
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controller.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: User login
      tags:
      - auth
  /rating:
    post:
      consumes:
      - application/json
      description: Adds a new rating for the recipe by the current user (from JWT)
        or updates the score if one already exists. Score must be between 1 and 5.
      parameters:
      - description: Rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/controller.PostRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RatingResponse'
        "400":
          description: Invalid request or score
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Recipe not found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add or update a rating for a recipe
      tags:
      - ratings
  /rating/{id}:
    put:
      consumes:
      - application/json
      description: Update the score of an existing rating by its ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated rating data
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/model.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a rating by ID
      tags:
      - ratings
  /ratings:
    get:
      description: Retrieve a paginated list of all ratings with user and recipe details
      parameters:
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Pagination offset
        in: query
        name: offset
        type: integer
      - default: date_desc
        description: 'Sort order: score_asc, score_desc, date_asc, date_desc'
        in: query
        name: sortOrder
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all ratings
      tags:
      - ratings
  /recipe:
    post:
      consumes:
      - application/json
      description: Create a new recipe with ingredients, tags (by IDs or names), categories,
        steps, and returns the new recipe including image IDs
      parameters:
      - description: Recipe data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/controller.PostRecipeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.RecipeWithImageIDs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new recipe
      tags:
      - recipes
  /recipe/{id}:
    get:
      description: Get detailed recipe info including ingredients, comments, tags,
        categories, steps, and image IDs
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RecipeWithImageIDs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get recipe by ID
      tags:
      - recipes
    put:
      consumes:
      - application/json
      description: Updates a recipe by ID. Replaces title, text, ingredients, steps,
        tags, and categories.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated recipe data
        in: body
        name: recipe
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
      summary: Update an existing recipe
      tags:
      - recipes
  /recipe/{id}/calories:
    get:
      description: Estimate nutrition info based on ingredients via AI model
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.NutritionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get nutritional values for a recipe
      tags:
      - recipes
  /recipe/{id}/categories:
    delete:
      description: Clears all categories associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove all categories from a recipe
      tags:
      - recipes
    get:
      description: Retrieves all categories associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get categories for a recipe
      tags:
      - recipes
  /recipe/{id}/comments:
    get:
      description: Retrieve a paginated list of comments for a specific recipe with
        total count, optionally sorted by likes or date
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Limit number of comments returned
        in: query
        name: limit
        type: integer
      - description: Number of comments to skip
        in: query
        name: offset
        type: integer
      - description: 'Sort order: likes_desc, likes_asc, date_asc, date_desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CommentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all comments for a recipe with pagination and sorting
      tags:
      - comments
  /recipe/{id}/image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file and associates it with a recipe (must belong
        to the authenticated user)
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file (jpeg, png, webp)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or file error
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to upload for this recipe
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload image for a recipe
      tags:
      - images
  /recipe/{id}/image/{imageId}:
    delete:
      description: Deletes an image associated with a recipe (must belong to the authenticated
        user)
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      responses:
        "200":
          description: Image deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Not authorized to delete this recipe image
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a recipe image by ID
      tags:
      - images
    get:
      description: Retrieves and serves an image associated with a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Serve recipe image by ID
      tags:
      - images
  /recipe/{id}/ingredients:
    get:
      description: Retrieve all ingredients for a specific recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.IngredientsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all ingredients for a recipe
      tags:
      - recipes
  /recipe/{id}/rating:
    get:
      description: Retrieve the average rating and count of ratings for a given recipe
        ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AverageRatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get average rating for a recipe
      tags:
      - ratings
  /recipe/{id}/tags:
    delete:
      description: Clears all tags associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Remove all tags from a recipe
      tags:
      - recipes
    get:
      description: Retrieves all tags associated with the specified recipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get tags for a recipe
      tags:
      - recipes
    put:
      consumes:
      - application/json
      description: Replaces the tags associated with the specified recipe.
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of tag names
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/controller.TagNamesInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update tags for a recipe
      tags:
      - recipes
  /recipe/list:
    get:
      description: Retrieve a paginated list of recipes with total count, optionally
        filtered by title, ingredient, tags, categories, user, and sorted by title,
        creation date, rating, or favorites
      parameters:
      - description: Limit number of recipes returned
        in: query
        name: limit
        type: integer
      - description: Number of recipes to skip
        in: query
        name: offset
        type: integer
      - description: 'Sort order: title_asc, title_desc, created_asc, created_desc,
          rating_desc, favorites_desc'
        in: query
        name: sort
        type: string
      - description: Filter by recipe title (partial match)
        in: query
        name: title
        type: string
      - description: Filter by ingredient name (partial match)
        in: query
        name: ingredient
        type: string
      - description: Filter by tag IDs (comma-separated)
        in: query
        name: tag_ids
        type: string
      - description: Filter by category IDs (comma-separated)
        in: query
        name: category_ids
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RecipeListWithImagesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all recipes with pagination, filtering, and sorting
      tags:
      - recipes
  /recipes/most-popular:
    get:
      description: Get recipes sorted by number of favorites
      parameters:
      - description: Limit number of recipes
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MostPopularRecipesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get most popular recipes by favorites
      tags:
      - recipes
  /recipes/search:
    get:
      description: Search for recipes using various filters and retrieve a paginated
        list with total count, optionally sorted
      parameters:
      - description: Filter by recipe title (partial match)
        in: query
        name: title
        type: string
      - description: Filter by ingredient name (partial match)
        in: query
        name: ingredient
        type: string
      - description: Filter by tag IDs (comma-separated)
        in: query
        name: tag_ids
        type: string
      - description: Filter by category IDs (comma-separated)
        in: query
        name: category_ids
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: 'Sort order: title_asc, title_desc, created_asc, created_desc,
          rating_desc, favorites_desc'
        in: query
        name: sort
        type: string
      - description: Limit number of recipes returned
        in: query
        name: limit
        type: integer
      - description: Number of recipes to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.RecipeListWithImagesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Search recipes with pagination, filtering, and sorting
      tags:
      - recipes
  /recipes/top-rated:
    get:
      description: Get recipes sorted by average rating, with total votes count
      parameters:
      - description: Limit number of recipes
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.TopRatedRecipe'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get top rated recipes
      tags:
      - recipes
  /reset-password:
    post:
      consumes:
      - application/json
      description: Resets password using reset token
      parameters:
      - description: Reset password data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.ResetPasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Reset user password
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User signup info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserSignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /tag:
    post:
      consumes:
      - application/json
      description: Creates a new tag. Optionally associates it with recipes by IDs.
      parameters:
      - description: Tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/model.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a new tag
      tags:
      - tags
  /tag/{id}:
    delete:
      description: Deletes a tag and removes all its associations with recipes
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SimpleMessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete a tag by ID
      tags:
      - tags
    get:
      description: Retrieves a tag by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get a tag by ID
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Updates the name of a tag specified by its ID
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated tag data
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/controller.TagsResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update a tag by ID
      tags:
      - tags
  /tags:
    get:
      description: Retrieve all tags, optionally sorted by name or creation date
      parameters:
      - description: 'Sort order: name_asc, name_desc, created_asc, created_desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TagsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get all tags
      tags:
      - tags
  /user/favorites:
    get:
      description: Retrieve a paginated list of favorite recipes for the logged-in
        user
      parameters:
      - description: Limit number of favorites returned
        in: query
        name: limit
        type: integer
      - description: Number of favorites to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserFavoritesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user's favorites with pagination
      tags:
      - users
  /user/profile:
    get:
      description: |-
        Fetches the complete profile of the authenticated user.
        The response includes:
        - **Base user info** (ID, name, email, timestamps)
        - **Profile image** (optional, if uploaded)
        - **User statistics** (totals, averages, likes, ratings, favorites)
        - **Highlights** (most popular and highest-rated recipes created by the user)
      produces:
      - application/json
      responses:
        "200":
          description: User profile with details, stats, and highlights
          schema:
            $ref: '#/definitions/controller.UserProfileResponse'
        "401":
          description: 'Unauthorized: missing or invalid token'
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user profile
      tags:
      - users
  /user/profile-image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a single profile image for the authenticated user
      parameters:
      - description: Image file (jpeg, png, webp)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input or file error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload user profile image
      tags:
      - images
  /user/profile-image/{imageId}:
    delete:
      description: Deletes a user's profile image by ID
      parameters:
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      responses:
        "200":
          description: Profile image deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete authenticated user's profile image
      tags:
      - images
    get:
      description: Retrieves and serves a user's profile image
      parameters:
      - description: Image ID
        in: path
        name: imageId
        required: true
        type: integer
      produces:
      - image/*
      responses:
        "200":
          description: Image file served
        "400":
          description: Invalid ID parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Image not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Serve authenticated user's profile image
      tags:
      - images
  /user/ratings:
    get:
      description: Retrieve a paginated list of ratings for the logged-in user
      parameters:
      - description: Limit number of ratings returned
        in: query
        name: limit
        type: integer
      - description: Number of ratings to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserRatingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user's ratings with pagination
      tags:
      - users
  /user/recipes:
    get:
      description: Retrieve a paginated list of recipes for the logged-in user with
        total count
      parameters:
      - description: Limit number of recipes returned
        in: query
        name: limit
        type: integer
      - description: Number of recipes to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserRecipesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user's recipes with pagination
      tags:
      - users
swagger: "2.0"
